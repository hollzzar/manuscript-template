pull()
# SUSE handedness
hand_suse <- summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
select(handed_mean) %>%
pull()
# Mean hand for MAE participants
hand_mae_mean <- hand_mae %>%
mean(na.rm = TRUE) %>%
sprintf("%.2f", .)
# SD hand for MAE participants
hand_mae_sd <- hand_mae %>%
sd(na.rm = TRUE) %>%
sprintf("%.2f", .)
# Mean hand for SUSE participants
hand_suse_mean <- hand_suse %>%
mean(na.rm = TRUE) %>%
sprintf("%.2f", .)
# SD hand for MAE participants
hand_suse_sd <- hand_suse %>%
sd(na.rm = TRUE) %>%
sprintf("%.2f", .)
# hand minimum for MAE
hand_mae_min <- hand_mae %>%
min(na.rm = TRUE) %>%
sprintf("%.2f", .)
# hand maximum for MAE
hand_mae_max <- hand_mae %>%
max(na.rm = TRUE) %>%
sprintf("%.2f", .)
# hand minimum for SUSE
hand_suse_min <- hand_suse %>%
min(na.rm = TRUE) %>%
sprintf("%.2f", .)
# hand maximum for SUSE
hand_suse_max <- hand_suse %>%
max(na.rm = TRUE) %>%
sprintf("%.2f", .)
# hand range MAE
hand_mae_range <- paste0(hand_mae_min, "-", hand_mae_max)
# hand range SUSE
hand_suse_range <- paste0(hand_suse_min, "-", hand_suse_max)
# Do the mean hands of the two groups differ on average?
ttest_hand <- t.test(hand_mae, hand_suse)
# p value
hand_diff_p <- ttest_hand$p.value %>% p_formatting(format_code = 1)
# t value
hand_diff_t <- ttest_hand$statistic %>% t_formatting()
# df
hand_diff_df <- ttest_hand$parameter %>% df_formatting()
# MAE participant genders
gend_mae <- summary_back %>%
dplyr::filter(dialect == "MAE") %>%
select(Gender) %>%
group_by(Gender) %>%
summarise(count_mae = n(), .groups = "keep")
# SUSE participant genders
gend_suse <- summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
select(Gender) %>%
group_by(Gender) %>%
summarise(count_suse = n(), .groups = "keep")
# No non-binary participants
gend_non <- tibble(Gender = "Non-binary", count_mae = 0, count_suse = 0)
# Pull number of women/men in MAE group
gend_mae_w <- gend_mae %>% dplyr::filter(Gender == "Woman") %>% pull(count_mae)
gend_mae_m <- gend_mae %>% dplyr::filter(Gender == "Man") %>% pull(count_mae)
# Pull number of women/men SUSE group
gend_suse_w <- gend_suse %>% dplyr::filter(Gender == "Woman") %>% pull(count_suse)
gend_suse_m <- gend_suse %>% dplyr::filter(Gender == "Man") %>% pull(count_suse)
# Pull Southern participant data only
south_test <- summary_back %>% dplyr::filter(dialect == "SUSE")
# Compare saying and hearing might could
south_say <- south_test %>% pull(say_mean)
south_hear <- south_test %>% pull(hear_mean)
ttest_mc <- t.test(south_say, south_hear, paired = TRUE)
# p value
ttest_mc_p <- ttest_mc$p.value %>% p_formatting()
# t value
ttest_mc_t <- ttest_mc$statistic %>% t_formatting()
# df
ttest_mc_df <- ttest_mc$parameter %>% df_formatting()
# Compare combined might could score and familiarity
south_mc <- south_test %>% pull(MC_mean)
south_fam <- south_test %>% pull(double_familiar)
south_fam <- south_fam*(5/4) # Re-scale familiarity score (X/4) to compare with might could score (X/5)
ttest_exp_fam <- t.test(south_mc, south_fam, paired = TRUE)
# p value
ttest_exp_fam_p <- ttest_exp_fam$p.value %>% p_formatting()
# t value
ttest_exp_fam_t <- ttest_exp_fam$statistic %>% t_formatting()
# df
ttest_exp_fam_df <- ttest_exp_fam$parameter %>% df_formatting()
# Pull summary code for MAE
geo_mae <- summary_back %>%
dplyr::filter(dialect == "MAE") %>%
pull(raise_total)
# Pull summary code for SUSE
geo_suse <- summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
pull(raise_total)
# Compare MAE and SUSE backgrounds
ttest_geo <- t.test(geo_mae, geo_suse)
# p value
geo_p <- ttest_geo$p.value %>% p_formatting()
# t value
geo_t <- ttest_geo$statistic %>% t_formatting()
# df
geo_df <- ttest_geo$parameter %>% df_formatting()
# Get number of MAE participants with childhood data
geo_data_mae <- summary_back %>%
dplyr::filter(!is.na(childhood) & dialect == "MAE") %>%
select(childhood) %>%
nrow()
# Get number of SUSE participants with childhood data
geo_data_suse <- summary_back %>%
dplyr::filter(!is.na(childhood) & dialect == "SUSE") %>%
select(childhood) %>%
nrow()
# Get summary data for MAE and SUSE participants
geo_data_summary <- summary_back %>%
select(ID, dialect, childhood) %>%
group_by(dialect, childhood) %>%
summarise(state_count = n(), .groups = "keep") %>%
drop_na() %>%
mutate(state_pct = if_else(dialect == "MAE", state_count/geo_data_mae, state_count/geo_data_suse))
# MAE childhood
geo_data_summary_mae <- geo_data_summary %>%
dplyr::filter(dialect == "MAE") %>%
arrange(desc(state_pct)) %>%
head(1) %>%
rowwise() %>%
mutate(state_pct = pct_formatting(state_pct))
# SUSE childhood
geo_data_summary_suse <- geo_data_summary %>%
dplyr::filter(dialect == "SUSE") %>%
arrange(desc(state_pct)) %>%
head(3) %>%
rowwise() %>%
mutate(state_pct = pct_formatting(state_pct))
# Pull Southern culture for SUSE
cult_suse <- summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
pull(South_weighted) %>%
as.numeric()
# Pull Southern culture for MAE
cult_mae <- summary_back %>%
dplyr::filter(dialect == "MAE") %>%
pull(South_weighted) %>%
as.numeric()
# Pull American culture for SUSE
american_suse <- summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
pull(American_weighted) %>%
as.numeric()
# Pull American culture for MAE
american_mae <- summary_back %>%
dplyr::filter(dialect == "MAE") %>%
pull(American_weighted) %>%
as.numeric()
# Pull Northern culture for SUSE
north_suse <- summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
pull(North_weighted) %>%
as.numeric()
# Pull Northern culture for MAE
north_mae <- summary_back %>%
dplyr::filter(dialect == "MAE") %>%
pull(North_weighted) %>%
as.numeric()
# Pull Midwestern culture for SUSE
mid_suse <- summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
pull(Mid_weighted) %>%
as.numeric()
# Pull Midwestern culture for MAE
mid_mae <- summary_back %>%
dplyr::filter(dialect == "MAE") %>%
pull(Mid_weighted) %>%
as.numeric()
# Pull Western culture for SUSE
west_suse <- summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
pull(West_weighted) %>%
as.numeric()
# Pull Western culture for MAE
west_mae <- summary_back %>%
dplyr::filter(dialect == "MAE") %>%
pull(West_weighted) %>%
as.numeric()
# Pull Appalachian culture for SUSE
app_suse <- summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
pull(App_weighted) %>%
as.numeric()
# Pull Appalachian culture for MAE
app_mae <- summary_back %>%
dplyr::filter(dialect == "MAE") %>%
pull(App_weighted) %>%
as.numeric()
# t-test: sig
cult_ttest <- t.test(cult_mae, cult_suse)
# cult_ttest
# p value
cult_p <- cult_ttest$p.value %>% p_formatting()
# t value
cult_t <- cult_ttest$statistic %>% t_formatting()
# df
cult_df <- cult_ttest$parameter %>% df_formatting()
# American t-test: ns
# t.test(american_mae, american_suse)
# North t-test: sig
north_ttest <- t.test(north_mae, north_suse)
# north_ttest
# p value
north_p <- north_ttest$p.value %>% p_formatting()
# t value
north_t <- north_ttest$statistic %>% t_formatting()
# df
north_df <- north_ttest$parameter %>% df_formatting()
# *t*(`r north_df`) = `r north_t`, *p* `r north_p`
# Midwestern t-test: ns
# t.test(mid_mae, mid_suse)
# Western t-test: ns
# t.test(west_mae, west_suse)
# Appalachian t-test: ns
# t.test(app_mae, app_suse)
# Pull exposure data
exposure <- summary_back %>%
select(ID, MC_mean, say_mean, hear_mean, south_only, hear_only, say_only, dialect) %>%
drop_na() %>%
rename(mc_say = say_mean,
mc_hear = hear_mean,
mc_overall = MC_mean,
southern_say = say_only,
southern_hear = hear_only,
southern_overall = south_only)
# Pull MAE exposure data: overall south
exp_south_overall_mae <- exposure %>%
dplyr::filter(dialect == "MAE") %>%
pull(southern_overall) %>%
as.numeric()
# Pull SUSE exposure data: overall south
exp_south_overall_suse <- exposure %>%
dplyr::filter(dialect == "SUSE") %>%
pull(southern_overall) %>%
as.numeric()
# t-test: sig
ttest_south_overall <- t.test(exp_south_overall_mae, exp_south_overall_suse)
# p value
south_overall_p <- ttest_south_overall$p.value %>% p_formatting()
# t value
south_overall_t <- ttest_south_overall$statistic %>% t_formatting()
# df
south_overall_df <- ttest_south_overall$parameter %>% df_formatting()
# Pull MAE exposure data: overall mc
exp_mc_overall_mae <- exposure %>%
dplyr::filter(dialect == "MAE") %>%
pull(mc_overall) %>%
as.numeric()
# Pull SUSE exposure data: overall mc
exp_mc_overall_suse <- exposure %>%
dplyr::filter(dialect == "SUSE") %>%
pull(mc_overall) %>%
as.numeric()
# t-test: sig
ttest_mc_overall <- t.test(exp_mc_overall_mae, exp_mc_overall_suse)
# p value
mc_overall_p <- ttest_mc_overall$p.value %>% p_formatting()
# t value
mc_overall_t <- ttest_mc_overall$statistic %>% t_formatting()
# df
mc_overall_df <- ttest_mc_overall$parameter %>% df_formatting()
# Pull SUSE exposure data: hear mc
exp_mc_hear_suse <- exposure %>%
dplyr::filter(dialect == "SUSE") %>%
pull(mc_hear) %>%
as.numeric()
# Pull SUSE exposure data: say mc
exp_mc_say_suse <- exposure %>%
dplyr::filter(dialect == "SUSE") %>%
pull(mc_say) %>%
as.numeric()
# Pull SUSE exposure data: hear south
exp_south_hear_suse <- exposure %>%
dplyr::filter(dialect == "SUSE") %>%
pull(southern_hear) %>%
as.numeric()
# Pull SUSE exposure data: say south
exp_south_say_suse <- exposure %>%
dplyr::filter(dialect == "SUSE") %>%
pull(southern_say) %>%
as.numeric()
# t-test: ns
ttest_mc_suse <- t.test(exp_mc_hear_suse, exp_mc_say_suse)
# t-test: ns
ttest_south_suse <- t.test(exp_south_hear_suse, exp_south_say_suse)
# t-test: ns
ttest_hear_suse <- t.test(exp_mc_hear_suse, exp_south_hear_suse)
# t-test: ns
ttest_say_suse <- t.test(exp_mc_say_suse, exp_south_say_suse)
# t-test: ns
ttest_overall_suse <- t.test(exp_mc_overall_suse, exp_south_overall_suse)
# Set up variable lists
judges <- c("familiar", "acceptable", "understand")
groups <- c("MAE", "SUSE")
# Compare judgments of attested double modals between groups
btx_judge <- lapply(judges, function(x)
t.test(summary_back %>%
dplyr::filter(dialect == "MAE") %>%
select(c(paste("double", x, sep = "_"))),
summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
select(c(paste("double", x, sep = "_")))))
# Pull statistics into table
btx_judge_result <- bind_rows(lapply(1:length(btx_judge),
function(x)
btx_judge[[x]]$method %>%
data.frame() %>%
mutate(p_val = getElement(btx_judge[[x]], "p.value"),
t_val = getElement(btx_judge[[x]], "statistic"),
df = getElement(btx_judge[[x]], "parameter"),
comp = judges[x])))
# Create difference scores for judgments relative to attested double modals
diff_scores <- summary_back %>%
mutate(acceptable_standard_diff = double_acceptable - standard_acceptable,
acceptable_incorrect_diff = double_acceptable - incorrect_acceptable,
understand_standard_diff = double_understand - standard_understand,
understand_incorrect_diff = double_understand - incorrect_understand,
familiar_standard_diff = double_familiar - standard_familiar,
familiar_incorrect_diff = double_familiar - incorrect_familiar) %>%
select(ID, dialect, contains("diff"))
# Set up additional variable list
comps <- c("standard", "incorrect")
# Compare difference scores between groups
zero_judge <- lapply(judges,
function(x) lapply(comps,
function(y)
t.test(diff_scores %>%
dplyr::filter(dialect == "MAE") %>%
pull(paste(x, y, "diff", sep = "_")) %>%
as.numeric(),
diff_scores %>%
dplyr::filter(dialect == "SUSE") %>%
pull(paste(x, y, "diff", sep = "_")) %>%
as.numeric())))
# Pull statistics
zero_judge_result <- lapply(1:length(judges),
function(x) lapply(1:length(comps),
function(y)
zero_judge[[x]][[y]]$method %>%
data.frame() %>%
mutate(p_val = getElement(zero_judge[[x]][[y]], "p.value"),
t_val = getElement(zero_judge[[x]][[y]], "statistic"),
df = getElement(zero_judge[[x]][[y]], "parameter"),
judgment = judges[x],
comp = comps[y])))
# Collapse into one table
zero_judge_result <- bind_rows(lapply(zero_judge_result, function(x) bind_rows(x)))
# Clean up result tables
colnames(btx_judge_result) <- c("method", "p", "t", "df", "judgment")
btx_judge_result <- btx_judge_result %>%
mutate(df = df_formatting(df),
`t` = t_formatting(`t`),
p_str = p_formatting(p, 1),
apa = apa_formatting(df, `t`, p_str))
colnames(zero_judge_result) <- c("method", "p", "t", "df", "judgment", "comp")
zero_judge_result <- zero_judge_result %>%
mutate(df = df_formatting(df),
`t` = t_formatting(`t`),
p_str = p_formatting(p, 1),
apa = apa_formatting(df, `t`, p_str))
View(btx_judge_result)
btx_judge_result[btx_judge_result$judgment == 'familiar',]
btx_judge_result[btx_judge_result$judgment == 'familiar',btx_judge_result$apa]
btx_judge_result[btx_judge_result$judgment == 'familiar',]$apa
btx_judge_result[btx_judge_result$judgment == "familiar",]$apa`
x
1
==
slkajfa'dlsjks'
a'f'
``
btx_judge_result[btx_judge_result$judgment == "familiar",]$apa
btx_judge_result %>% filter(judgment == "familiar") %>% select(apa)
View(geo_data_summary)
# Get overall mean and sd
rt_mean <- comprehension_dat %>% pull(Question.RT) %>% mean()
rt_sd <- comprehension_dat %>% pull(Question.RT) %>% sd()
rt_total <- comprehension_dat %>% pull(Question.RT) %>% length()
# Define outliers
rt_out_high <- rt_mean + rt_sd*2
rt_out_low <- rt_mean - rt_sd
# Create composite comprehension question scores
comp_avg <- comprehension_dat %>%
dplyr::filter(Question.RT < rt_out_high & Question.RT > rt_out_low) %>%
group_by(ID) %>%
summarise(count = n(),
correct = sum(Question.ACC),
rt_avg = mean(Question.RT),
.groups = "keep") %>%
mutate(correct_avg = correct/count,
ID = as.character(ID))
# Get percent of outlier values
rt_within_count <- comp_avg %>% pull(count) %>% sum()
rt_out_count <- rt_total - rt_within_count
rt_out_pct <- pct_formatting(rt_out_count/rt_total)
# Add data to summary dataframe
summary_back <- left_join(summary_back, comp_avg, by = "ID")
# Get overall mean and sd
rt_mean <- comprehension_dat %>% pull(Question.RT) %>% mean()
rt_sd <- comprehension_dat %>% pull(Question.RT) %>% sd()
rt_total <- comprehension_dat %>% pull(Question.RT) %>% length()
# Define outliers
rt_out_high <- rt_mean + rt_sd*2
rt_out_low <- rt_mean - rt_sd
# Create composite comprehension question scores
comp_avg <- comprehension_dat %>%
dplyr::filter(Question.RT < rt_out_high & Question.RT > rt_out_low) %>%
group_by(ID) %>%
summarise(count = n(),
correct = sum(Question.ACC),
rt_avg = mean(Question.RT),
.groups = "keep") %>%
mutate(correct_avg = correct/count)
# Get percent of outlier values
rt_within_count <- comp_avg %>% pull(count) %>% sum()
rt_out_count <- rt_total - rt_within_count
rt_out_pct <- pct_formatting(rt_out_count/rt_total)
# Add data to summary dataframe
summary_back <- left_join(summary_back, comp_avg, by = "ID")
# Round the RT mean and SD for presentation
rt_mean <- rt_mean %>% rt_formatting()
rt_sd <- rt_sd %>% rt_formatting()
# Pull accuracy data for MAE
acc_mae <- summary_back %>%
dplyr::filter(dialect == "MAE") %>%
pull(correct_avg) %>%
as.numeric()
# Pull RT data for MAE
rt_mae <- summary_back %>%
dplyr::filter(dialect == "MAE") %>%
pull(rt_avg) %>%
as.numeric()
# Pull accuracy data for SUSE
acc_suse <- summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
pull(correct_avg) %>%
as.numeric()
# Pull RT data for SUSE
rt_suse <- summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
pull(rt_avg) %>%
as.numeric()
# Mean accuracy for MAE
acc_mae_mean <- acc_mae %>%
mean(na.rm = TRUE) %>%
pct_formatting()
# SD accuracy for MAE
acc_mae_sd <- acc_mae %>%
sd(na.rm = TRUE) %>%
pct_formatting()
# Mean accuracy for SUSE
acc_suse_mean <- acc_suse %>%
mean(na.rm = TRUE) %>%
pct_formatting()
# SD accuracy for SUSE
acc_suse_sd <- acc_suse %>%
sd(na.rm = TRUE) %>%
pct_formatting()
# Does the accuracy of SUSE participants differ from that of MAE participants on average?
lm_acc <- summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
mutate(SUSE_acc_diff = correct_avg - mean(acc_mae, na.rm = TRUE)) %>%
lm(SUSE_acc_diff ~ 1, data = .)
summary_acc <- summary(lm_acc)
# p value
acc_diff_p <- summary_acc$coefficients[4] %>% p_formatting()
# t value
acc_diff_t <- summary_acc$coefficients[3] %>% t_formatting()
# df
acc_diff_df <- summary_acc$df[2]
# Do the mean accuracy rates of the two groups differ on average?
ttest_acc <- t.test(acc_mae, acc_suse)
# Mean accuracy for MAE
rt_mae_mean <- rt_mae %>%
mean(na.rm = TRUE) %>%
rt_formatting()
# SD accuracy for MAE
rt_mae_sd <- rt_mae %>%
sd(na.rm = TRUE) %>%
rt_formatting()
# Mean accuracy for SUSE
rt_suse_mean <- rt_suse %>%
mean(na.rm = TRUE) %>%
rt_formatting()
# SD accuracy for SUSE
rt_suse_sd <- rt_suse %>%
sd(na.rm = TRUE) %>%
rt_formatting()
# Does the RT of SUSE participants differ from that of MAE participants on average?
lm_rt <- summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
mutate(SUSE_rt_diff = rt_avg - mean(rt_mae, na.rm = TRUE)) %>%
lm(SUSE_rt_diff ~ 1, data = .)
summary_rt <- summary(lm_rt)
# Do the mean RTs of the two groups differ on average?
ttest_rt <- t.test(rt_mae, rt_suse)
View(btx_group)
View(ttest_south_suse)
View(win_group)
View(btx_group)
