wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
# Load basic variables
source("~/Mirror/DM_analysis_scripts/r_scripts/DM_global_vars.R")
# Make empty table to hold table spots
empty_table <- tibble::tibble(XX = "")
# Comprehension question data
comprehension_dat <- read.csv("~/Mirror/DM_analysis_scripts/r_scripts/erp/comprehension.csv")
# Within-group analyses
win_group <- read.csv("~/Mirror/DM_analysis_scripts/r_scripts/processed_data/win_group_erp.csv",
stringsAsFactors = FALSE,
header = TRUE,
row.names = 1)
# Between-group analyses
btx_group <- read.csv("~/Mirror/DM_analysis_scripts/r_scripts/processed_data/btx_group_erp.csv",
stringsAsFactors = FALSE,
header = TRUE,
row.names = 1)
# Behavioral data
summary_back <- read.csv("~/Mirror/DM_analysis_scripts/r_scripts/processed_data/behav_data.csv",
stringsAsFactors = FALSE,
header = TRUE,
row.names = 1)
# Sentence strings
critical_dm_ex <- '"She thinks she *might **should*** ask the professor for an extension."'
critical_sm_ex <- '"She thinks she ***should*** ask the professor for an extension."'
critical_un_ex <- '"She thinks she *could **should*** ask the professor for an extension."'
critical_context <- '"Kaitlyn is having a hard time with her essay."'
filler_context <- '"Kaitlyn waits for the bus every morning to go to work."'
filler_ex <- '"She said *the that* bus is usually late."'
# Stimulus table
headers <- c("Type", "Context sentence", "Condition", "Target sentence")
critical_dm <- c("Critical", critical_context, "Attested double modal", critical_dm_ex)
critical_sm <- c("Critical", critical_context, "Standard single modal", critical_sm_ex)
critical_un <- c("Critical", critical_context, "Unattested double modal", critical_un_ex)
filler <- c("Filler", filler_context, "", filler_ex)
stim_table <- rbind(critical_sm, critical_dm, critical_un, filler) %>% as.data.frame()
rownames(stim_table) <- NULL
colnames(stim_table) <- headers
# Number of participants excluded from all analyses
## 107 and 122 (MAE) did not fulfill language criteria
mae_exc <- 2
## 202 (SUSE) did not fulfill age criteria
suse_exc <- 1
# Total participants tested
total_mae <- summary_back %>% dplyr::filter(dialect == "MAE") %>% nrow() %>% sum(mae_exc)
total_suse <- summary_back %>% dplyr::filter(dialect == "SUSE") %>% nrow() %>% sum(suse_exc)
total_all <- total_mae + total_suse
# Number of participants with ERP and behavioral data
erp_mae <- summary_back %>%
dplyr::filter(dialect == "MAE" & erp_code == 1 & behav_code == 1) %>%
nrow()
erp_suse <- summary_back %>%
dplyr::filter(dialect == "SUSE" & erp_code == 1 & behav_code == 1) %>%
nrow()
erp_all <- erp_mae + erp_suse
# Number of participants with offline data
## 214 (MAE) completed EEG session but had to leave early without completing judgment or attitude surveys
off_mae <- summary_back %>% dplyr::filter(dialect == "MAE" & behav_code == 1) %>% nrow()
## 225 (SUSE) completed dialect and attitude surveys but could not complete EEG session (hair)
off_suse <- summary_back %>% dplyr::filter(dialect == "SUSE" & behav_code == 1) %>% nrow()
# Number of participants excluded from ERP analysis (blinks)
erp_exc_mae <- summary_back %>% dplyr::filter(erp_code == 0 & dialect == "MAE") %>% nrow()
erp_exc_suse <- summary_back %>% dplyr::filter(erp_code == 0 & dialect == "SUSE" & ID != "225") %>% nrow()
# Restrict all further analyses to participants with both ERP and behavioral data
summary_back <- summary_back %>%
dplyr::filter(erp_code == 1 & behav_code == 1)
# Pull age data for MAE participants
age_mae <- summary_back %>%
dplyr::filter(dialect == "MAE") %>%
pull(Age) %>%
as.numeric()
# Pull age data for SUSE participants
age_suse <- summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
pull(Age) %>%
as.numeric()
# Mean age for MAE participants
age_mae_mean <- age_mae %>%
mean(na.rm = TRUE) %>%
sprintf("%.2f", .)
# SD age for MAE participants
age_mae_sd <- age_mae %>%
sd(na.rm = TRUE) %>%
sprintf("%.2f", .)
# Mean age for SUSE participants
age_suse_mean <- age_suse %>%
mean(na.rm = TRUE) %>%
sprintf("%.2f", .)
# SD age for MAE participants
age_suse_sd <- age_suse %>%
sd(na.rm = TRUE) %>%
sprintf("%.2f", .)
# Age minimum for MAE
age_mae_min <- age_mae %>%
min(na.rm = TRUE) %>%
round(0)
# Age maximum for MAE
age_mae_max <- age_mae %>%
max(na.rm = TRUE) %>%
round(0)
# Age minimum for SUSE
age_suse_min <- age_suse %>%
min(na.rm = TRUE) %>%
round(0)
# Age maximum for SUSE
age_suse_max <- age_suse %>%
max(na.rm = TRUE) %>%
round(0)
# Age range MAE
age_mae_range <- paste0(age_mae_min, "-", age_mae_max)
# Age range SUSE
age_suse_range <- paste0(age_suse_min, "-", age_suse_max)
# Do the mean ages of the two groups differ on average?
ttest_age <- t.test(age_mae, age_suse)
# p value
age_diff_p <- ttest_age$p.value %>% p_formatting(format_code = 1)
# t value
age_diff_t <- ttest_age$statistic %>% t_formatting()
# df
age_diff_df <- ttest_age$parameter %>% df_formatting()
# MAE mood
mood_mae <- summary_back %>%
dplyr::filter(dialect == "MAE") %>%
select(mood_mean) %>%
pull()
# SUSE mood
mood_suse <- summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
select(mood_mean) %>%
pull()
# Mean mood for MAE participants
mood_mae_mean <- mood_mae %>%
mean(na.rm = TRUE) %>%
sprintf("%.2f", .)
# SD mood for MAE participants
mood_mae_sd <- mood_mae %>%
sd(na.rm = TRUE) %>%
sprintf("%.2f", .)
# Mean mood for SUSE participants
mood_suse_mean <- mood_suse %>%
mean(na.rm = TRUE) %>%
sprintf("%.2f", .)
# SD mood for MAE participants
mood_suse_sd <- mood_suse %>%
sd(na.rm = TRUE) %>%
sprintf("%.2f", .)
# mood minimum for MAE
mood_mae_min <- mood_mae %>%
min(na.rm = TRUE) %>%
sprintf("%.2f", .)
# mood maximum for MAE
mood_mae_max <- mood_mae %>%
max(na.rm = TRUE) %>%
sprintf("%.2f", .)
# mood minimum for SUSE
mood_suse_min <- mood_suse %>%
min(na.rm = TRUE) %>%
sprintf("%.2f", .)
# mood maximum for SUSE
mood_suse_max <- mood_suse %>%
max(na.rm = TRUE) %>%
sprintf("%.2f", .)
# mood range MAE
mood_mae_range <- paste0(mood_mae_min, "-", mood_mae_max)
# mood range SUSE
mood_suse_range <- paste0(mood_suse_min, "-", mood_suse_max)
# Do the mean moods of the two groups differ on average?
ttest_mood <- t.test(mood_mae, mood_suse)
# p value
mood_diff_p <- ttest_mood$p.value %>% p_formatting(format_code = 0)
# t value
mood_diff_t <- ttest_mood$statistic %>% t_formatting()
# df
mood_diff_df <- ttest_mood$parameter %>% df_formatting()
# MAE handedness
hand_mae <- summary_back %>%
dplyr::filter(dialect == "MAE") %>%
select(handed_mean) %>%
pull()
# SUSE handedness
hand_suse <- summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
select(handed_mean) %>%
pull()
# Mean hand for MAE participants
hand_mae_mean <- hand_mae %>%
mean(na.rm = TRUE) %>%
sprintf("%.2f", .)
# SD hand for MAE participants
hand_mae_sd <- hand_mae %>%
sd(na.rm = TRUE) %>%
sprintf("%.2f", .)
# Mean hand for SUSE participants
hand_suse_mean <- hand_suse %>%
mean(na.rm = TRUE) %>%
sprintf("%.2f", .)
# SD hand for MAE participants
hand_suse_sd <- hand_suse %>%
sd(na.rm = TRUE) %>%
sprintf("%.2f", .)
# hand minimum for MAE
hand_mae_min <- hand_mae %>%
min(na.rm = TRUE) %>%
sprintf("%.2f", .)
# hand maximum for MAE
hand_mae_max <- hand_mae %>%
max(na.rm = TRUE) %>%
sprintf("%.2f", .)
# hand minimum for SUSE
hand_suse_min <- hand_suse %>%
min(na.rm = TRUE) %>%
sprintf("%.2f", .)
# hand maximum for SUSE
hand_suse_max <- hand_suse %>%
max(na.rm = TRUE) %>%
sprintf("%.2f", .)
# hand range MAE
hand_mae_range <- paste0(hand_mae_min, "-", hand_mae_max)
# hand range SUSE
hand_suse_range <- paste0(hand_suse_min, "-", hand_suse_max)
# Do the mean hands of the two groups differ on average?
ttest_hand <- t.test(hand_mae, hand_suse)
# p value
hand_diff_p <- ttest_hand$p.value %>% p_formatting(format_code = 1)
# t value
hand_diff_t <- ttest_hand$statistic %>% t_formatting()
# df
hand_diff_df <- ttest_hand$parameter %>% df_formatting()
# MAE participant genders
gend_mae <- summary_back %>%
dplyr::filter(dialect == "MAE") %>%
select(Gender) %>%
group_by(Gender) %>%
summarise(count_mae = n(), .groups = "keep")
# SUSE participant genders
gend_suse <- summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
select(Gender) %>%
group_by(Gender) %>%
summarise(count_suse = n(), .groups = "keep")
# No non-binary participants
gend_non <- tibble(Gender = "Non-binary", count_mae = 0, count_suse = 0)
# Pull number of women/men in MAE group
gend_mae_w <- gend_mae %>% dplyr::filter(Gender == "Woman") %>% pull(count_mae)
gend_mae_m <- gend_mae %>% dplyr::filter(Gender == "Man") %>% pull(count_mae)
# Pull number of women/men SUSE group
gend_suse_w <- gend_suse %>% dplyr::filter(Gender == "Woman") %>% pull(count_suse)
gend_suse_m <- gend_suse %>% dplyr::filter(Gender == "Man") %>% pull(count_suse)
# Pull Southern participant data only
south_test <- summary_back %>% dplyr::filter(dialect == "SUSE")
# Compare saying and hearing might could
south_say <- south_test %>% pull(say_mean)
south_hear <- south_test %>% pull(hear_mean)
ttest_mc <- t.test(south_say, south_hear, paired = TRUE)
# p value
ttest_mc_p <- ttest_mc$p.value %>% p_formatting()
# t value
ttest_mc_t <- ttest_mc$statistic %>% t_formatting()
# df
ttest_mc_df <- ttest_mc$parameter %>% df_formatting()
# Compare combined might could score and familiarity
south_mc <- south_test %>% pull(MC_mean)
south_fam <- south_test %>% pull(double_familiar)
south_fam <- south_fam*(5/4) # Re-scale familiarity score (X/4) to compare with might could score (X/5)
ttest_exp_fam <- t.test(south_mc, south_fam, paired = TRUE)
# p value
ttest_exp_fam_p <- ttest_exp_fam$p.value %>% p_formatting()
# t value
ttest_exp_fam_t <- ttest_exp_fam$statistic %>% t_formatting()
# df
ttest_exp_fam_df <- ttest_exp_fam$parameter %>% df_formatting()
# Pull summary code for MAE
geo_mae <- summary_back %>%
dplyr::filter(dialect == "MAE") %>%
pull(raise_total)
# Pull summary code for SUSE
geo_suse <- summary_back %>%
dplyr::filter(dialect == "SUSE") %>%
pull(raise_total)
# Compare MAE and SUSE backgrounds
ttest_geo <- t.test(geo_mae, geo_suse)
# p value
geo_p <- ttest_geo$p.value %>% p_formatting()
# t value
geo_t <- ttest_geo$statistic %>% t_formatting()
# df
geo_df <- ttest_geo$parameter %>% df_formatting()
ttest_geo
geo_suse
View(summary_back)
